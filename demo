#! /usr/bin/env bash

# Get the directory in which the currently running script is located.
cmd_dir=$(dirname "$0")

train_network="$cmd_dir/train_network"
test_network="$cmd_dir/test_network"

echo "Training neural network to classify binary or operation"
$train_network -d "$cmd_dir/demo_data/or_train.csv" -T 7,2 -b 10 -r 0.1 -t 1 > "$cmd_dir/or_network.txt"

# Even with a short training time of 1s I found overfitting can occur for this small of a dataset, thus accuracy below 100%
# should not be surprising. However I did try to tune network parameters to achieve 100% in most conditions
echo "Using neural network to classify binary or test data"
cat "$cmd_dir/or_network.txt" | $test_network -d "$cmd_dir/demo_data/or_test.csv" | column -t -s ","

echo ""
echo "Unzipping mnist data"
unzip -q -o "$cmd_dir/demo_data/mnist_data.zip" -d "$cmd_dir"

# Training of zero seconds results in an untrained network of the proper topology being generated by train_network
echo "Using untrained neural network to classify handwritten digits"
$train_network  -d "$cmd_dir/mnist_train.csv" -T 784,10 -t 0  | $test_network -d "$cmd_dir/mnist_test.csv" | column -t -s ","

echo "Training neural network to classify handwritten digits (30 seconds)"
$train_network -d "$cmd_dir/mnist_train.csv" -T 784,32,32,32,10 -b 10 -r 0.06 -t 30 > "$cmd_dir/mnist_network.txt"

echo "Using trained neural network to classify mnist test data"
cat "$cmd_dir/mnist_network.txt" | $test_network -d "$cmd_dir/mnist_test.csv" | column -t -s ","

echo ""
echo "Converting digit images to csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/0.jpg" > "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/1.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/2.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/3.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/4.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/5.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/6.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/7.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/8.jpg" >> "$cmd_dir/images.csv"
python "$cmd_dir/demo_data/converter.py" "$cmd_dir/demo_data/9.jpg" >> "$cmd_dir/images.csv"

# I drew these myself and thus are ideal for the network, ideally I would have used a similar line thickness,
# centering etc. Also ideally I would have drawn then at 28x28 pixels not resampling them as I do with the script
# Results will vary from run to run as network initial conditions are randomized
echo "Using neural network to classify handwritten digit images"
cat "$cmd_dir/images.csv" | $test_network -n "$cmd_dir/mnist_network.txt" | awk -F "," '{print $785" "$786}' | column -t -s " "
